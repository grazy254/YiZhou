package models.order;

import org.joda.time.DateTime;

import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.List;

import annotation.TableBind;
import base.Constant;
import base.models.BaseTraverRecord;
import kits.StringsKit;
import models.member.MemberInfo;
import plugin.sqlInXml.SqlManager;

/**
 * Generated by JFinal.
 */
@TableBind(tableName = "dele_traver_record")
public class TraverRecord extends BaseTraverRecord<TraverRecord> {
    public static final TraverRecord dao = new TraverRecord();

    /**
     * 默认司机行程列表
     *
     * @param j
     * @param w
     * @param memberInfo
     * @param type
     * @param recordType
     * @param cityCode
     * @param eCityCode
     * @param time
     * @param pageStart
     * @param pageSize
     * @return
     */
    public List<TraverRecord> recordList(Double j, Double w, MemberInfo memberInfo, int type, int recordType, String cityCode, String eCityCode, Date time, int pageStart, int pageSize) {
        String where;
        List<TraverRecord> traverRecords;
        if (type == 2) {
            where = "and dd.use_flag = 1 AND dt.people < dt.totalPeople";
        } else {
            where = "AND dt.people < dt.totalPeople";
        }
        if (recordType == 3) {
            if ("".equals(eCityCode)) {
                return find(StringsKit.replaceSql(SqlManager.sql("traver.daihuo"), "and start_adcode=?"), j, w, Constant.TraverStatus.CREATE, time, cityCode, pageStart, pageSize);
            } else {
                String sql = SqlManager.sql("traver.daihuo");
                String str = StringsKit.replaceSql(sql, "and start_adcode=? and end_adcode = ?");
                List<TraverRecord> records = find(str, j, w, type, recordType, cityCode, eCityCode, Constant.TraverStatus.CREATE, time, pageStart, pageSize);
                return records;
            }
        } else {
            if (recordType == 2) {
                traverRecords = find(StringsKit.replaceSql(SqlManager.sql("traver.findRecord"), "and end_adcode IN (SELECT end_adcode FROM dele_traver_record s where s.memberId = ? and s.status = 1)" + where), j, w, type, recordType, memberInfo.getId(), Constant.TraverStatus.CREATE, time, memberInfo.getId(), pageStart, pageSize);
                if (traverRecords.size() == 0) {
//                    if (eCityCode == null) {
                    if("".equals(eCityCode)){
                        traverRecords = find(StringsKit.replaceSql(SqlManager.sql("traver.findRecord"), "and start_adcode=?" + where), j, w, type, recordType, cityCode, Constant.TraverStatus.CREATE, time, cityCode, pageStart, pageSize);
                    } else {
                        traverRecords = find(StringsKit.replaceSql(SqlManager.sql("traver.findRecord"), "and start_adcode=? and end_adcode=?" + where), j, w, type, recordType, cityCode, eCityCode, Constant.TraverStatus.CREATE, time, cityCode, pageStart, pageSize);
                    }
                }
                return traverRecords;
            } else {
                return find(StringsKit.replaceSql(SqlManager.sql("traver.findRecord"), where), j, w, type, recordType, cityCode, Constant.TraverStatus.CREATE, time, pageStart, pageSize);
            }
        }
    }


    /**
     * 返回所有行程
     *
     * @param type
     * @param recordType
     * @param pageStart
     * @param pageSize
     * @return
     */
    public List<TraverRecord> recordAllList(int type, int recordType, Date time, int pageStart, int pageSize) {
        String where;
        if (type == 2) {
            where = "AND dt.people < dt.totalPeople";
        } else {
            where = "";
        }
        if (recordType == 3) {
            return find(SqlManager.sql("traver.daihuo"), Constant.TraverStatus.CREATE, time, pageStart, pageSize);
        } else {
            return find(StringsKit.replaceSql(SqlManager.sql("traver.findAll"), where), type, recordType, Constant.TraverStatus.CREATE, time, pageStart, pageSize);
        }
    }

    /**
     * 查看用户执行中行程
     */
    public List<TraverRecord> findHistory(int type, int id, int status, int pageStart, int pageSize) {
		/*if (type==Constant.DRIVER) {
			return find(StringsKit.replaceSql(SqlManager.sql("traver.findHistoryRecord"),"and dl.status=?"),id,id,status,id,pageStart,pageSize);
		}else {
			if (status==2) {
				return find(StringsKit.replaceSql(SqlManager.sql("traver.findHistoryRecord"),"and dl.status <= ? "),id,id,status,id,pageStart,pageSize);
			}else {
				return find(StringsKit.replaceSql(SqlManager.sql("traver.findHistoryRecord"),"and dl.status=?"),id,id,status,id,pageStart,pageSize);
			}
		}*/
        return find(StringsKit.replaceSql(SqlManager.sql("traver.findHistoryRecord"), "and dl.status=?"), id, id, status, id, pageStart, pageSize);
    }


    /**
     * 获取司机行程
     */
    public TraverRecord findDriverRecord(int driverId, String startTime) {
        return findFirst(SqlManager.sql("traver.findDriverRecord"), driverId, startTime);
    }

    /**
     * 获取司机行程列表
     */
    public List<TraverRecord> findDriverTraver(Double j, Double w, int recordType, int driverId, String sCityCode, String eCityCode, int pageStart, int pageSize) {
        List<TraverRecord> traverRecords;
        if (recordType == 2) {
            traverRecords = find(StringsKit.replaceSql(SqlManager.sql("traver.findDriverList"), "and end_adcode IN (SELECT end_adcode FROM dele_traver_record d WHERE d.driverId = ? and d.status = 1)"), j, w, recordType, driverId, DateTime.now().toDate(), j, w, recordType, sCityCode, DateTime.now().toDate(), driverId, pageStart, pageSize);
            if (traverRecords.size() == 0) {
                if (eCityCode == null) {
                    traverRecords = find(StringsKit.replaceSql(SqlManager.sql("traver.findDriverList"), "and start_adcode = ?"), j, w, recordType, driverId, DateTime.now().toDate(), j, w, recordType, sCityCode, DateTime.now().toDate(), sCityCode, pageStart, pageSize);
                } else {
                    traverRecords = find(StringsKit.replaceSql(SqlManager.sql("traver.findDriverList"), "and start_adcode = ? and end_adcode = ?"), j, w, recordType, driverId, DateTime.now().toDate(), j, w, recordType, sCityCode, DateTime.now().toDate(), sCityCode, eCityCode, pageStart, pageSize);
                }
            }
            return traverRecords;
        } else {
            return find(SqlManager.sql("traver.findDriverList"), j, w, recordType, driverId, DateTime.now().toDate(), j, w, recordType, sCityCode, DateTime.now().toDate(), pageStart, pageSize);
        }
    }


    /**
     * 判断行程是否属于司机行程
     */
    public boolean decide(int recordId, int driverId) {
        if (findFirst("select * from dele_traver_record where id = ? and driverId = ? and type = 1", recordId, driverId) != null) {
            return true;
        } else {
            return false;
        }
    }

    @Deprecated
    public List<TraverRecord> findSFCList(int recordType, String sAddress, String eAddress, Date sTime, Date eTime, int appType, int pageStart, int pageSize) {
        sAddress = "%" + sAddress + "%";
        eAddress = "%" + eAddress + "%";
        return find(SqlManager.sql("traver.findSFCList"), sTime, eTime, recordType, appType, pageStart, pageSize, sAddress, eAddress);
    }

    @Deprecated
    public List<TraverRecord> findSFCListTwo(int recordType, double startLat, double startLon, double endLat, double endLon, Date sTime, Date eTime, int appType, int pageStart, int pageSize) {
        DecimalFormat df = new DecimalFormat("######0.000");
        String startLatStr = formatDecimal(startLat) + "___";
        String startLonStr = formatDecimal(startLon) + "___";
        String endLatStr = formatDecimal(endLat) + "___";
        String endLonStr = formatDecimal(endLon) + "___";
        if (startLat == 0 || startLon == 0) {
            startLatStr = "%";
            startLonStr = "%";
        }
        if (endLat == 0 || endLon == 0) {
            endLatStr = "%";
            endLonStr = "%";
        }
        return find(SqlManager.sql("traver.findSFCListTwo"), sTime, eTime, recordType, appType, pageStart, pageSize, startLatStr, startLonStr, endLatStr, endLonStr);
    }


    public List<TraverRecord> recordListTwo(Double j, Double w, MemberInfo memberInfo, int type, int recordType, String cityCode, String eCityCode, int pageStart, int pageSize, double startLat, double startLon, double endLat, double endLon, Date sTime, Date eTime) {
        String startLatStr = formatDecimal(startLat) + "%";
        String startLonStr = formatDecimal(startLon) + "%";
        String endLatStr = formatDecimal(endLat) + "%";
        String endLonStr = formatDecimal(endLon) + "%";
        String where2 = " ";
        String whereTime = " ";
        //添加经纬度搜索
        if ((startLat != 0 && startLon != 0) && (endLat != 0 && endLon != 0)) {
            where2 = " AND ( ( dt.start_latitude LIKE '" + startLatStr + "' AND dt.start_longitude LIKE '" + startLonStr + "' ) OR ( dt.end_latitude LIKE '" + endLatStr + "' AND dt.end_longitude LIKE '" + endLonStr + "' ) ) ";
        } else if (endLat != 0 && endLon != 0) {
            where2 = " AND ( dt.end_latitude LIKE '" + endLatStr + "' AND dt.end_longitude LIKE '" + endLonStr + "' )";
        } else if (startLat != 0 && startLon != 0) {
            where2 = " AND ( dt.start_latitude LIKE '" + startLatStr + "' AND dt.start_longitude LIKE '" + startLonStr + "' )";
        }
        //添加时间搜索
        if (sTime != null && eTime != null) {
            whereTime = " AND ((setout_time1 BETWEEN '" + sTime + "' AND '" + eTime + "' ) OR (setout_time2 BETWEEN '" + sTime + "' AND '" + eTime + "' )) ";
        }
        String where;
        List<TraverRecord> traverRecords;
        if (type == 2) {
            where = "AND dd.use_flag = 1 AND dt.people < dt.totalPeople";
        } else {
            where = "AND dt.people < dt.totalPeople";
        }
        where += where2 + whereTime;
        if (recordType == 3) {
            if (eCityCode == null) {
                return find(StringsKit.replaceSql(SqlManager.sql("traver.daihuo2"), "and start_adcode=" + cityCode + ""), j, w, Constant.TraverStatus.CREATE, pageStart, pageSize);
            } else {
                return find(StringsKit.replaceSql(SqlManager.sql("traver.daihuo2"), "and start_adcode=" + cityCode + " and end_adcode = " + eCityCode + ""), j, w, Constant.TraverStatus.CREATE, pageStart, pageSize);
            }
        } else {
            if (recordType == 2) {
                traverRecords = find(StringsKit.replaceSql(SqlManager.sql("traver.findRecord2"), "and end_adcode IN (SELECT end_adcode FROM dele_traver_record s where s.memberId = ? and s.status = 1)" + where), j, w, type, recordType, memberInfo.getId(), Constant.TraverStatus.CREATE, memberInfo.getId(), pageStart, pageSize);
                if (traverRecords.size() == 0) {
                    if (eCityCode == null) {
                        traverRecords = find(StringsKit.replaceSql(SqlManager.sql("traver.findRecord2"), "and start_adcode=?" + where), j, w, type, recordType, cityCode, Constant.TraverStatus.CREATE, cityCode, pageStart, pageSize);
                    } else {
                        traverRecords = find(StringsKit.replaceSql(SqlManager.sql("traver.findRecord2"), "and start_adcode=? and end_adcode=?" + where), j, w, type, recordType, cityCode, eCityCode, Constant.TraverStatus.CREATE, cityCode, pageStart, pageSize);
                    }
                }
                return traverRecords;
            } else {
                return find(StringsKit.replaceSql(SqlManager.sql("traver.findRecord2"), where), j, w, type, recordType, cityCode, Constant.TraverStatus.CREATE, pageStart, pageSize);
            }
        }
    }

    public List<TraverRecord> findDriverTraverTwo(Double j, Double w, int recordType, int driverId, String sCityCode, String eCityCode, int pageStart, int pageSize, double startLat, double startLon, double endLat, double endLon, Date sTime, Date eTime) {
        String startLatStr = formatDecimal(startLat) + "%";
        String startLonStr = formatDecimal(startLon) + "%";
        String endLatStr = formatDecimal(endLat) + "%";
        String endLonStr = formatDecimal(endLon) + "%";
        String whereL = " ";
        String whereTime = " ";
        //添加经纬度搜索
        if ((startLat != 0 && startLon != 0) && (endLat != 0 && endLon != 0)) {
            whereL = " AND ( ( dt.start_latitude LIKE '" + startLatStr + "' AND dt.start_longitude LIKE '" + startLonStr + "' ) OR ( dt.end_latitude LIKE '" + endLatStr + "' AND dt.end_longitude LIKE '" + endLonStr + "' ) ) ";
        } else if (endLat != 0 && endLon != 0) {
            whereL = " AND ( dt.end_latitude LIKE '" + endLatStr + "' AND dt.end_longitude LIKE '" + endLonStr + "' )";
        } else if (startLat != 0 && startLon != 0) {
            whereL = " AND ( dt.start_latitude LIKE '" + startLatStr + "' AND dt.start_longitude LIKE '" + startLonStr + "' )";
        }
        //添加时间搜索
        if (sTime != null && eTime != null) {
            whereTime = " AND ((setout_time1 BETWEEN '" + sTime + "' AND '" + eTime + "' ) OR (setout_time2 BETWEEN '" + sTime + "' AND '" + eTime + "' )) ";
        }
        List<TraverRecord> traverRecords;
        String where = "";
        String where2 = "";
        //2 城际；
        if (recordType == 2) {
            where = " and end_adcode IN (SELECT end_adcode FROM dele_traver_record d WHERE d.driverId = ? and d.status = 1) ";
            where += whereL + whereTime;
            traverRecords = find(StringsKit.replaceSql(SqlManager.sql("traver.findDriverList2"), where), j, w, recordType, driverId, j, w, recordType, sCityCode, driverId, pageStart, pageSize);
            if (traverRecords.size() == 0) {
                if (eCityCode == null) {
                    where2 = " and start_adcode = ? " + whereL + whereTime;
                    traverRecords = find(StringsKit.replaceSql(SqlManager.sql("traver.findDriverList2"), where2), j, w, recordType, driverId, j, w, recordType, sCityCode, sCityCode, pageStart, pageSize);
                } else {
                    where2 = " and start_adcode = ? and end_adcode = ? " + whereL + whereTime;
                    traverRecords = find(StringsKit.replaceSql(SqlManager.sql("traver.findDriverList2"), where2), j, w, recordType, driverId, j, w, recordType, sCityCode, sCityCode, eCityCode, pageStart, pageSize);
                }
            }
            return traverRecords;
        } else {
            return find(StringsKit.replaceSql(SqlManager.sql("traver.findDriverList2"), whereL + whereTime), j, w, recordType, driverId, j, w, recordType, sCityCode, pageStart, pageSize);
        }
    }


    public String formatDecimal(double value) {
        final DecimalFormat formater = new DecimalFormat();
        formater.setMaximumFractionDigits(2);
        formater.setGroupingSize(0);
        formater.setRoundingMode(RoundingMode.FLOOR);
        String result = formater.format(value);
        return result;
    }
}
